version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.1.0
  aws-eks: circleci/aws-eks@0.1.0

commands:
  get-kubernetes-status:
    steps:
      - run:
          name: Status check
          command: |
            kubectl get services,deployments -o wide
  set-aws-environment-variables:
    description: |
      Set environment variables so that they can be used in each step of a job.
      https://circleci.com/docs/2.0/env-vars/#using-bash_env-to-set-environment-variables
    parameters:
      aws-access-key-id:
        type: string
      aws-secret-access-key:
        type: string
      aws-region:
        type: string
    steps:
      - run:
          name: Set environment variables
          command: |
            echo 'export AWS_ACCESS_KEY_ID="<< parameters.aws-access-key-id >>"' >> $BASH_ENV
            echo 'export AWS_SECRET_ACCESS_KEY="<< parameters.aws-secret-access-key >>"' >> $BASH_ENV
            echo 'export AWS_REGION="<< parameters.aws-region >>"' >> $BASH_ENV
  deploy-services:
    parameters:
      deploy-write-services:
        description: |
          If this value is false then some write services won't be deployed.
          This is needed in the test environment.
        type: boolean
        default: true
      eks-cluster-name:
        type: string
      aws-region:
        type: string
      aws-access-key-id:
        type: string
      aws-secret-access-key:
        type: string
      container-registry-url:
        type: string
    steps:
      - set-aws-environment-variables:
          aws-access-key-id: << parameters.aws-access-key-id >>
          aws-secret-access-key: << parameters.aws-secret-access-key >>
          aws-region: << parameters.aws-region >>
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          install-kubectl: true
          cluster-name: << parameters.eks-cluster-name >>
          aws-region: << parameters.aws-region >>
      - run:
          name: Run db migrations
          command: |
            # run db migration
            sh ./scripts/run-db-migration.sh
      - run:
          name: deploy
          command: |
            # deploy services
            CONTAINER_REGISTRY_URL=<< parameters.container-registry-url >> \
            DEPLOY_WRITE_SERVICES=<< parameters.deploy-write-services >> \
            sh ./scripts/deploy-services.sh
      - get-kubernetes-status
  push-images-to-ecr:
    description: |
      Pushes the build images, which have been persisted in the workspace, to ECR
    parameters:
      aws-region:
        type: string
      aws-access-key-id:
        type: string
      aws-secret-access-key:
        type: string
      container-registry-url:
        type: string
    steps:
      - set-aws-environment-variables:
          aws-access-key-id: << parameters.aws-access-key-id >>
          aws-secret-access-key: << parameters.aws-secret-access-key >>
          aws-region: << parameters.aws-region >>
      - aws-ecr/ecr-login:
          region: AWS_REGION
      - checkout
      - attach_workspace:
          # The attached workspace contains the docker images which were built in a previous step
          at: /tmp/workspace
      - run:
          name: Loading docker images
          command: |
            echo "loading docker images from persisted workspace..."
            docker load -i /tmp/workspace/docker/build-images.tar
            docker images
      - run:
          name: Push images
          command: |
            CONTAINER_REGISTRY_URL=<< parameters.container-registry-url >> \
            sh ./scripts/docker-push.sh

jobs:
  build-images:
    # `docker_layer_caching` will speed up the builds but it costs extra money.
    # We need to investigate the tradeoff.
    # docker_layer_caching: true
    machine: true
    steps:
      - checkout
      - run:
          name: Save docker images
          command: |
            mkdir -p /tmp/workspace/docker

            sh ./scripts/docker-build.sh

            docker images

            # save all images, with names and tags, in a tar ball
            docker save $(docker images | sed '1d' | awk '{print $1 ":" $2 }') -o /tmp/workspace/docker/build-images.tar

      # Persist the `/tmp/workspace/docker` dir where the docker images are saved.
      # The docker images will be used in other jobs.
      - persist_to_workspace:
          root: /tmp/workspace
          # Must be relative path from root
          paths:
            - docker
  deploy-prod-environment:
    executor: aws-eks/python3
    steps:
      - deploy-services:
          deploy-write-services: true
          aws-region: "${AWS_REGION}"
          aws-access-key-id: "${PROD_AWS_ACCESS_KEY_ID}"
          aws-secret-access-key: "${PROD_AWS_SECRET_ACCESS_KEY}"
          container-registry-url: "${PROD_CONTAINER_REGISTRY_URL}"
          eks-cluster-name: "${EKS_CLUSTER_NAME}"
  deploy-sandbox-environment:
    executor: aws-eks/python3
    steps:
      - deploy-services:
          deploy-write-services: true
          aws-region: "${AWS_REGION}"
          aws-access-key-id: "${SANDBOX_AWS_ACCESS_KEY_ID}"
          aws-secret-access-key: "${SANDBOX_AWS_SECRET_ACCESS_KEY}"
          container-registry-url: "${SANDBOX_CONTAINER_REGISTRY_URL}"
          eks-cluster-name: "${EKS_CLUSTER_NAME}"
  deploy-test-environment:
    executor: aws-eks/python3
    steps:
      - deploy-services:
          aws-region: "${AWS_REGION}"
          aws-access-key-id: "${TEST_AWS_ACCESS_KEY_ID}"
          aws-secret-access-key: "${TEST_AWS_SECRET_ACCESS_KEY}"
          container-registry-url: "${TEST_CONTAINER_REGISTRY_URL}"
          deploy-write-services: false
          eks-cluster-name: "${EKS_CLUSTER_NAME}"
  push-images-to-prod:
    machine: true
    steps:
      - push-images-to-ecr:
          aws-region: "${AWS_REGION}"
          aws-access-key-id: "${PROD_AWS_ACCESS_KEY_ID}"
          aws-secret-access-key: "${PROD_AWS_SECRET_ACCESS_KEY}"
          container-registry-url: "${PROD_CONTAINER_REGISTRY_URL}"
  push-images-to-sandbox:
    machine: true
    steps:
      - push-images-to-ecr:
          aws-region: "${AWS_REGION}"
          aws-access-key-id: "${SANDBOX_AWS_ACCESS_KEY_ID}"
          aws-secret-access-key: "${SANDBOX_AWS_SECRET_ACCESS_KEY}"
          container-registry-url: "${SANDBOX_CONTAINER_REGISTRY_URL}"
  push-images-to-test:
    machine: true
    steps:
      - push-images-to-ecr:
          aws-region: "${AWS_REGION}"
          aws-access-key-id: "${TEST_AWS_ACCESS_KEY_ID}"
          aws-secret-access-key: "${TEST_AWS_SECRET_ACCESS_KEY}"
          container-registry-url: "${TEST_CONTAINER_REGISTRY_URL}"
  run-integration-tests:
    executor: aws-eks/python3
    steps:
      - set-aws-environment-variables:
          aws-access-key-id: "${TEST_AWS_ACCESS_KEY_ID}"
          aws-secret-access-key: "${TEST_AWS_SECRET_ACCESS_KEY}"
          aws-region: "${AWS_REGION}"
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          install-kubectl: true
          cluster-name: "${EKS_CLUSTER_NAME}"
          aws-region: "${AWS_REGION}"
      - run:
          name: Add API urls to param store
          command: |
            # TODO
            echo "add API urls to param store"
      - run:
          name: Run tests
          command: |
            echo "run integration tests"
            # sh run-integration-tests.sh
      - get-kubernetes-status

workflows:
  deploy-master:
    jobs:

      - build-images:
          filters:
            branches:
              only: master

      - push-images-to-test:
          requires:
            - build-images

      - deploy-test-environment:
          requires:
            - push-images-to-test

      - run-integration-tests:
          requires:
            - deploy-test-environment

      - push-images-to-sandbox:
          requires:
            - run-integration-tests

      - push-images-to-prod:
          requires:
            - run-integration-tests

      - deploy-sandbox-environment:
          requires:
            - push-images-to-sandbox

      - deploy-prod-environment:
          requires:
            - push-images-to-prod
